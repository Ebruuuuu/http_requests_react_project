{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); //sendHttpRequest function is an asynchronous function\n  //The http request is a side effect\n\n  const sendHttpRequest = useCallback(async () => {\n    setIsLoading(true); //To make sure that we clear any previous errors we might have gotten.\n\n    setError(null);\n\n    try {\n      //fetch API returns a promise\n      //await keyword is used instead of the then-catch block\n      const response = await fetch('https://http-5b0bf-default-rtdb.europe-west1.firebasedatabase.app/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      } //the JSON data is converted to JavaScript data\n      //This also returns a promise\n\n\n      const data = await response.json(); //ok field signals whether the response was successful or not.\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    sendHttpRequest();\n  }, [sendHttpRequest]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://http-5b0bf-default-rtdb.europe-west1.firebasedatabase.app/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      //headers does not require technically for firebase.\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    });\n\n    if (isLoading) {\n      content = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, \"Loading...\");\n    }\n\n    if (error) {\n      content = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendHttpRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, content));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/01-starting-project/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","sendHttpRequest","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\n\nimport MoviesList from './components/MoviesList'\nimport './App.css'\nimport AddMovie from './components/AddMovie'\n\nconst App = () => {\n  const [movies, setMovies] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  //sendHttpRequest function is an asynchronous function\n  //The http request is a side effect\n\n  const sendHttpRequest = useCallback(async () => {\n    setIsLoading(true)\n    //To make sure that we clear any previous errors we might have gotten.\n    setError(null)\n\n    try {\n      //fetch API returns a promise\n      //await keyword is used instead of the then-catch block\n      const response = await fetch(\n        'https://http-5b0bf-default-rtdb.europe-west1.firebasedatabase.app/movies.json'\n      )\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!')\n      }\n\n      //the JSON data is converted to JavaScript data\n      //This also returns a promise\n      const data = await response.json()\n\n      //ok field signals whether the response was successful or not.\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        }\n      })\n      setMovies(transformedMovies)\n    } catch (error) {\n      setError(error.message)\n    }\n    setIsLoading(false)\n  }, [])\n\n  useEffect(() => {\n    sendHttpRequest()\n  }, [sendHttpRequest])\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n      'https://http-5b0bf-default-rtdb.europe-west1.firebasedatabase.app/movies.json',\n      {\n        method: 'POST',\n        body: JSON.stringify(movie),\n        //headers does not require technically for firebase.\n        headers: { 'Content-Type': 'application/json' },\n      }\n    )\n    const data = await response.json()\n    console.log(data)\n  }\n\n  let content = <p>Found no movies.</p>\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n\n    if (isLoading) {\n      content = <p>Loading...</p>\n    }\n\n    if (error) {\n      content = <p>{error}</p>\n    }\n  }\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler}></AddMovie>\n      </section>\n      <section>\n        <button onClick={sendHttpRequest}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}