{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EbruL\\\\Desktop\\\\react-complete-guide-code-14-sending-http-requests\\\\code\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); //sendHttpRequest function is an asynchronous function\n\n  async function sendHttpRequest() {\n    setIsLoading(true); //To make sure that we clear any previous errors we might have gotten.\n\n    setError(null);\n\n    try {\n      //fetch API returns a promise\n      //await keyword is used instead of the then-catch block\n      const response = await fetch('https://swapi.dev/api/film/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      } //the JSON data is converted to JavaScript data\n      //This also returns a promise\n\n\n      const data = await response.json(); //ok field signals whether the response was successful or not.\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n    const content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, \"Found no movies.\");\n\n    if (isLoading) {\n      content = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, \"Loading...\");\n    }\n\n    if (error) {\n      content = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendHttpRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 45\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 57\n    }\n  }, \"Found no movies.\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 23\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/EbruL/Desktop/react-complete-guide-code-14-sending-http-requests/code/01-starting-project/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","sendHttpRequest","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport MoviesList from './components/MoviesList'\nimport './App.css'\n\nfunction App() {\n  const [movies, setMovies] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  //sendHttpRequest function is an asynchronous function\n  async function sendHttpRequest() {\n    setIsLoading(true)\n    //To make sure that we clear any previous errors we might have gotten.\n    setError(null)\n\n    try {\n      //fetch API returns a promise\n      //await keyword is used instead of the then-catch block\n      const response = await fetch('https://swapi.dev/api/film/')\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!')\n      }\n\n      //the JSON data is converted to JavaScript data\n      //This also returns a promise\n      const data = await response.json()\n\n      //ok field signals whether the response was successful or not.\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        }\n      })\n      setMovies(transformedMovies)\n      setIsLoading(false)\n    } catch (error) {\n      setError(error.message)\n    }\n    setIsLoading(false)\n\n    const content = <p>Found no movies.</p>\n\n    if (isLoading) {\n      content = <p>Loading...</p>\n    }\n\n    if (error) {\n      content = <p>{error}</p>\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={sendHttpRequest}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}